/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashtabelle;

import process.HashTable;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;

public class App {
    public static void main(String[] args) {
        String fileName = "names.csv";

        int numEntries = countEntries(fileName);
        int hashTableSize = calculateSuitableSize(numEntries);

        HashTable hashTable = new HashTable(hashTableSize);

        readEntriesFromFile(hashTable, fileName);

        // Console menu
        Scanner scanner = new Scanner(System.in);
        int choice = -1;
        while (choice != 0) {
            System.out.println("------ Menu ------");
            System.out.println("1. Search for a name");
            System.out.println("2. Remove a name");
            System.out.println("3. Query occupancy");
            System.out.println("0. Exit");
            System.out.print("Enter your choice: ");
            try {
                choice = Integer.parseInt(scanner.nextLine());

                switch (choice) {
                    case 1:
                        System.out.print("Enter the name to search: ");
                        String searchName = scanner.nextLine();
                        try {
                            int searchResult = hashTable.getkey(searchName);
                            System.out.println("Name '" + searchName + "' found.");
                        }catch (NullPointerException e){
                            System.out.println("Name '" + searchName + "' not found.");
                        }
                        break;
                    case 2:
                        System.out.print("Enter the name to remove: ");
                        String removeName = scanner.nextLine();
                        hashTable.remove(removeName);
                        System.out.println("Name removed.");
                        break;
                    case 3:
                        double occupancy = (double) hashTable.getSize() / hashTable.HASH_TABLE_SIZE;
                        System.out.println("Occupancy: " + occupancy);
                        break;
                    case 0:
                        System.out.println("Exiting...");
                        break;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                        break;
                }
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a number.");
            }
        }
        scanner.close();
    }

    private static int countEntries(String filename) {
        int count = 0;
        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
            while (reader.readLine() != null) {
                count++;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return count;
    }

    private static int calculateSuitableSize(int numEntries) {
        // Find a prime number greater than twice the number of entries
        int size = numEntries * 2 + 1;
        while (!isPrime(size)) {
            size += 2;
        }
        return size;
    }

    private static boolean isPrime(int n) {
        if (n <= 1) return false;
        if (n <= 3) return true;

        if (n % 2 == 0 || n % 3 == 0) return false;

        for (int i = 5; i * i <= n; i += 6) {
            if (n % i == 0 || n % (i + 2) == 0) {
                return false;
            }
        }
        return true;
    }

    private static void readEntriesFromFile(HashTable hashTable, String filename) {
        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
            String line;
            int key = 0; // Start with key 0 and increment for each value
            while ((line = reader.readLine()) != null) {
                String value = line.trim(); // Assume each line contains a single value
                hashTable.insert(value, key);
                key++;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}